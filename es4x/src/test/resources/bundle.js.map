{"version":3,"file":"bundle.js","mappings":";;;;UAAA;UACA;;UAEA;UACA;;;;;WCJA;WACA;WACA;WACA;WACA;;;;;WCJA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;;;;WCAA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;;;;;;;;ACfA,qCAAqC;AACrC,YAAY;AACZ,OAAO,CAAC,GAAG,CAAC,gDAAe,CAAC;AAC5B,MAAM,MAAM,GAAW,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,4GAA+B,CAAC,CAAC,CAAC;AAE5E,MAAM,CAAC,WAAW,CAAC;IACjB,QAAQ,EACN,4EAA4E;CAC/E,CAAC,CAAC;AACH,MAAM,CAAC,SAAS,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE;IAC1C,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACtB,CAAC,CAAC","sources":["webpack://phala_chain_bridge/webpack/bootstrap","webpack://phala_chain_bridge/webpack/runtime/get javascript chunk filename","webpack://phala_chain_bridge/webpack/runtime/hasOwnProperty shorthand","webpack://phala_chain_bridge/webpack/runtime/make namespace object","webpack://phala_chain_bridge/webpack/runtime/publicPath","webpack://phala_chain_bridge/webpack/runtime/import chunk loading","webpack://phala_chain_bridge/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","__webpack_require__.b = new URL(\"./\", import.meta.url);\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0\n};\n\n// no install chunk\n\n// no chunk on demand loading\n\n// no external install chunk\n\n// no on chunks loaded","/// <reference types=\"@vertx/core\" />\n// @ts-check\nconsole.log(import.meta.url)\nconst worker: Worker = new Worker(new URL(\"my.worker.js\", import.meta.url));\n\nworker.postMessage({\n  question:\n    'The Answer to the Ultimate Question of Life, The Universe, and Everything.',\n});\nworker.onmessage = ({ data: { answer } }) => {\n  console.log(answer);\n};"],"names":[],"sourceRoot":""}